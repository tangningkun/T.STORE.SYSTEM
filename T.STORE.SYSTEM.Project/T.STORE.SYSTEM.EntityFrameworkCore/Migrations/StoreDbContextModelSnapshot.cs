// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using T.STORE.SYSTEM.EntityFrameworkCore;

namespace T.STORE.SYSTEM.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("T.STORE.SYSTEM.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Component");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Icon");

                    b.Property<string>("IsPage")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Pid")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Sort");

                    b.Property<byte[]>("TenantId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("T.STORE.SYSTEM.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsUse");

                    b.Property<string>("MenuIds")
                        .HasMaxLength(1000);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TenantId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("T.STORE.SYSTEM.Domain.Entities.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Exception");

                    b.Property<DateTime>("LogDate")
                        .HasMaxLength(6);

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("MachineIp")
                        .HasMaxLength(50);

                    b.Property<string>("MachineName")
                        .HasMaxLength(50);

                    b.Property<string>("Message");

                    b.Property<string>("NetRequestMethod")
                        .HasMaxLength(10);

                    b.Property<string>("NetRequestUrl")
                        .HasMaxLength(500);

                    b.Property<string>("NetUserAuthtype")
                        .HasMaxLength(50);

                    b.Property<string>("NetUserIdentity")
                        .HasMaxLength(50);

                    b.Property<string>("NetUserIsauthenticated")
                        .HasMaxLength(10);

                    b.Property<byte[]>("TenantId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("Id");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("T.STORE.SYSTEM.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("TenantId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("departmentId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("T.STORE.SYSTEM.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<byte[]>("RoleId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("TenantId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
